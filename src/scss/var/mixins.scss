@import 'variables.scss';

@mixin gradient-bg($gradient: linear-gradient, $deg: 0deg) {
  $gradient: $gradient + '('+ (
      $deg,
      $lilac,
      $l-blue,
      $blue,
      $lightblue,
      $green1,
      $green2,
      $blue,
      $l-blue,
      $lilac,
      $pink2,
      $pink,
      $coral
    ) + ')';
  background-image: $gradient;
}

@mixin reflect($opacity: 0.15) {
  $gradient: linear-gradient + '('+ (transparent, rgba($black, $opacity)) +')';
  -webkit-box-reflect: below 1px $gradient;
}

@mixin card-border() {
  border: 2px solid;
  border-top-color: rgba($lilac, 0.15);
  border-left-color: rgba($blue, 0.15);
  border-bottom-color: rgba($blue, 0.05);
  border-right-color: transparent;
}

@mixin gradient-text($el: 'hero') {
  $degree: 90deg;
  $background-size: 200% auto;

  @if ($el == 'counter-card') {
    $degree: 50deg;
    $background-size: 150%;
  }

  @include gradient-bg($deg: $degree);
  background-size: $background-size;
  background-position: bottom;
  background-clip: text;
  -webkit-background-clip: text;
  color: $white;
  -webkit-text-fill-color: rgba($white, 0);
  animation: gradient 10s ease infinite;
}

/// Mixin to place items on a circle
/// @author Alexandra Batrak SCSS
/// @author Sơn Trần-Nguyễn LESS
/// @author Kitty Giraudel
/// @author Ana Tudor
/// $param {percentage} [$item-size=20%] - Size of a single item as percentage of the circle.
/// $param {integer} [$max-items=12] - Max number of items to be placed on the circle
@mixin on-circle($item-size: 20%, $max-items: 12) {
  $radius: 100% * 50% / $item-size;
  position: relative;
  width: 100%;
  height: 0;
  padding: 0 0 100% 0; // To make it a square.
  margin: 0;
  border-radius: 50%;
  list-style: none;

  & > * {
    display: block;
    position: absolute;
    // Move the items to center of the listing.
    top: 50%;
    left: 50%;
    width: $item-size;
    height: $item-size;
    // Offset half the size so they are truly centered.
    // Usually we use negative translation with transform,
    // but transform is used for positioning them, so we
    // use negative margin instead.
    margin: -($item-size / 2);

    // First one is always at middle right.
    &:nth-of-type(1) {
      transform: rotate(0) translate($radius);
    }

    // Supports number of items from 1 to 12.
    @for $i from 1 through $max-items {
      $angle: (360 / $i);

      &:nth-last-child(#{$i}):first-child {
        @for $j from 2 through $i {
          $rot: $angle * ($j - 1);

          & ~ :nth-of-type(#{$j}) {
            transform: rotate($rot * 1deg)
              translate($radius)
              rotate($rot * -1deg);
          }
        }
      }
    }
  }
}
